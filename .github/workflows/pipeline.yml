name: CI CD pipleine creation for Spring Boot application
on:
  push:
    branches:
      - main

env:
  STATE_FILE_BUCKET_NAME: ${{ vars.STATE_FILE_BUCKET_NAME }} #"terraformstatecrew"
  STATE_FILE_BUCKET_REGION: "${{ vars.STATE_FILE_BUCKET_REGION }}"
  STATE_FILE_KEY: "${{ vars.STATE_FILE_KEY }}"

jobs:
    Continuous-Integration:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
        name: Checkout the crewmeister repository          

      - name: Prerequisite 1 - Set up JDK 17
        uses: actions/setup-java@v4
        with:
            java-version: '17'
            distribution: 'temurin'
            cache: 'maven'

      - name: Prerequisite 2 - Build project crewmeister with Maven
        run: |
          chmod +x mvnw
          ./mvnw clean package -DskipTests 
          echo ${{ env.STATE_FILE_BUCKET_NAME }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: swarnava28
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker build
        run: docker build -t ${{secrets.DOCKER_USERNAME}}/java-app:${{ github.sha }} .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{secrets.DOCKER_USERNAME}}/java-app:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

      - name: Push Docker Image
        uses: docker/build-push-action@v6
        with:
            context: .
            push: true
            tags: ${{secrets.DOCKER_USERNAME}}/java-app:${{ github.sha }}

    Contineous-Deploy:
      needs: Continuous-Integration
      name: Continuous Deployment
      runs-on: ubuntu-latest
      steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create kubeconfig
        run: |
          echo ${HOME}
          mkdir ${HOME}/.kube
          echo ${{ secrets.KUBE_CONFIG }} | base64 --decode > ${HOME}/.kube/config
          cat ${HOME}/.kube/config

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: "v3.16.2"

      - name: Verify Helm Installation
        run: helm version

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.5

      - name: Verify Terraform Installation
        run: terraform --version

      - name: Terraform Init and Apply
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_KEY }}"
          cd terraform/environment
          terraform init -backend-config="bucket=${{env.STATE_FILE_BUCKET_NAME}}" -backend-config="key=${{env.STATE_FILE_KEY}}" -backend-config="region=${{env.STATE_FILE_BUCKET_REGION}}" -reconfigure
          terraform validate
          terraform refresh -var db_root_password="${{ secrets.DB_ROOT_PASSWORD }}" -var db_user_password="${{ secrets.DB_USER_PASSWORD }}" -var image_tag="${{ github.sha }}" -var registry_username="${{secrets.DOCKER_USERNAME}}" -var registry_password="${{secrets.DOCKERHUB_TOKEN}}" -var registry_email="${{ secrets.DOCKER_EMAIL }}" -var aws_region="${{env.STATE_FILE_BUCKET_REGION}}"
          terraform plan -var db_root_password="${{ secrets.DB_ROOT_PASSWORD }}" -var db_user_password="${{ secrets.DB_USER_PASSWORD }}" -var image_tag="${{ github.sha }}" -var registry_username="${{secrets.DOCKER_USERNAME}}" -var registry_password="${{secrets.DOCKERHUB_TOKEN}}" -var registry_email="${{ secrets.DOCKER_EMAIL }}" -var aws_region="${{env.STATE_FILE_BUCKET_REGION}}"
          terraform apply -var db_root_password="${{ secrets.DB_ROOT_PASSWORD }}" -var db_user_password="${{ secrets.DB_USER_PASSWORD }}" -var image_tag="${{ github.sha }}" -var registry_username="${{secrets.DOCKER_USERNAME}}" -var registry_password="${{secrets.DOCKERHUB_TOKEN}}" -var registry_email="${{ secrets.DOCKER_EMAIL }}" -var aws_region="${{env.STATE_FILE_BUCKET_REGION}}" --auto-approve
          #terraform destroy --auto-approve

      - name: List created Objects
        run: |
          kubectl get all -n application
          kubectl get all -n database
          kubectl get all -n monitoring

 